1. ExpandableStack Class
Time Complexity:

	Push Operation:

	Normally, the push operation takes O(1) time since it simply increments topIndex and places an element in stackArray.
	However, if the stack is full, it must expand by doubling its size. The expandStack method copies elements from the old array to a new, larger array, which takes O(x) time where x is the current size of the 	stack.
 
	Over a sequence of n pushes, the total cost of expansions is O(n), so the time complexity of push remains O(1).
	
	Pop Operation:

	The pop operation always takes O(1) time since it only involves decrementing topIndex and returning the top element.

	Top, isEmpty, isFull, and size Operations:

	Each of these methods performs a constant-time check or calculation, so their time complexities are O(1).

Space Complexity:

	The space complexity of ExpandableStack is O(n), where n is the maximum number of elements pushed onto the stack. This is because the stack expands as needed, doubling the size when it is full, to		accommodate all elements. 

	The total space used by stackArray is proportional to the number of elements, giving O(n) space complexity.
-----------------------------------------------------------------------------------------------------------------------------------------------

2. ParenthesisValidator Class
Time Complexity:

	isValid Method:
	The method iterates through each character in the input string s once, checking for (, ), *, and $.
	Each character is processed in O(1) time, so the time complexity of isValid is O(n), where n is the length of s.

Space Complexity:

	isValid Method:
	The method only uses two counters (openCount and starCount), each requiring a constant amount of space.

	No additional data structures are used, so the space complexity is O(1).
-----------------------------------------------------------------------------------------------------------------------------------------------

3. ParenthesisValidatorTest Class
Time Complexity:

	Reading the File and Processing Each Line:
	The main method reads each line in the input file and processes it using the isValid method of ParenthesisValidator.
	Let m represent the number of lines in the file, and n the average length of each line.

	The time complexity for reading and processing each line is O(n), and for m lines, this results in O(m * n).

Space Complexity:

	File Reading and Validation:
	The ParenthesisValidatorTest class only stores the current line being read and a reference to ParenthesisValidator. Each line is processed independently, so additional space for storing lines is not 		required.

	Therefore, the space complexity is O(1) for each line, with the overall space complexity remaining O(1).
